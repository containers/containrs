name: ci
on:
  pull_request: {}
  push:
    branches:
      - master
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: .github/setup
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: make

  build-lib:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    name: build-lib-release-${{ matrix.target }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: .github/setup
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: build-lib-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cross-rs
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          cross --version
      - name: Ensure the latest base image
        run: docker pull ghcr.io/cross-rs/${{matrix.target}}:main
      - name: Build for ${{matrix.target}}
        run: cross build -v --target ${{matrix.target}}
      - uses: actions/upload-artifact@v2
        with:
          name: lib
          path: lib-*.tar.gz

  build-bin-release-static:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build Release Static
        run: |
          sudo make build-bin-release-static
          sudo chown -R $(id -u):$(id -g) ~/.cargo target
      - uses: actions/upload-artifact@v2
        with:
          name: server
          path: target/x86_64-unknown-linux-musl/release/server

  doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: .github/setup
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Documentation
        run: make doc

  lint-clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: .github/setup
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Clippy Lint
        run: make lint-clippy

  lint-rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Rustfmt
        run: make lint-rustfmt

  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: .github/setup
      - name: Select nightly Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install rustfmt
        shell: bash
        run: rustup component add rustfmt
      - name: Install pinns
        run: make download-pinns
      - name: Unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib --workspace --exclude tests --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests'
      - name: Coverage
        uses: actions-rs/grcov@v0.1
        with:
          config: .github/grcov.yml
      - name: Upload Results
        uses: codecov/codecov-action@v2

  test-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: .github/setup
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install pinns
        run: make download-pinns
      - name: Unit Tests
        run: make test-unit

  test-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: .github/setup
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install CNI plugins
        shell: bash
        run: |
          curl -sfL -o - https://github.com/containernetworking/plugins/releases/download/$VERSION/cni-plugins-linux-amd64-$VERSION.tgz |
            sudo tar xfz - -C /usr/local/bin
          bridge
        env:
          VERSION: v1.0.1
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install pinns
        run: make download-pinns
      - name: Integration Tests
        run: |
          # Run all integration tests
          sudo -E env "PATH=$PATH" make test-integration

          # Fix permissions
          sudo chown -R $(id -u):$(id -g) ~/.cargo target
        env:
          RUST_TEST_THREADS: '1'

  test-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install pinns
        run: make download-pinns
      - name: End-to-End Tests
        run: make test-e2e
